See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (2 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 1 warning)

Correctness:  25/41 tests passed
Memory:       1/1 tests passed
Timing:       17/41 tests passed

Aggregate score: 64.88%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
1.8K Mar 31 04:10 BruteCollinearPoints.java
1.9K Mar 31 04:10 FastCollinearPoints.java
2.0K Mar 31 04:10 LineSegment.java
4.0K Mar 31 04:10 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 33]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 31]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] FastCollinearPoints.java:32:25: Control variable 'last' is modified inside loop. [ModifiedControlVariable]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 17/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    java.lang.ArrayIndexOutOfBoundsException: 8

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:156)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:157)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input40.txt
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:158)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input48.txt
    java.lang.ArrayIndexOutOfBoundsException: 48

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:159)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input299.txt
    java.lang.ArrayIndexOutOfBoundsException: 299

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:160)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains the same segment more than once
    - segment 2: (16307, 4652) -> (9972, 4652)
    - segment 3: (16307, 4652) -> (9972, 4652)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (5766, 4652) -> (16307, 4652)
    - reference segment 0: (4750, 4652) -> (5766, 4652) -> (9972, 4652) -> (16307, 4652)

    - number of entries in student   solution: 8
    - number of entries in reference solution: 5
    - 6 extra entries in student solution, including: '(13832, 7657) -> (12772, 7657)'
    - 3 missing entries in student solution, including: '(2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)'

  * filename = horizontal25.txt
    - segments() contains the same segment more than once
    - segment 2: (19615, 1256) -> (16419, 1256)
    - segment 3: (19615, 1256) -> (16419, 1256)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (13505, 1256) -> (19615, 1256)
    - reference segment 0: (10021, 1256) -> (13505, 1256) -> (16419, 1256) -> (19615, 1256)

    - number of entries in student   solution: 59
    - number of entries in reference solution: 25
    - 38 extra entries in student solution, including: '(15665, 20333) -> (20780, 20333)'
    - 4 missing entries in student solution, including: '(8784, 20913) -> (9880, 20913) -> (16352, 20913) -> (19666, 20913)'

  * filename = horizontal50.txt
    - segments() contains the same segment more than once
    - segment 2: (15579, 1040) -> (8302, 1040)
    - segment 3: (15579, 1040) -> (8302, 1040)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (4459, 1040) -> (15579, 1040)
    - reference segment 0: (2624, 1040) -> (4459, 1040) -> (8302, 1040) -> (15579, 1040)

    - number of entries in student   solution: 112
    - number of entries in reference solution: 50
    - 72 extra entries in student solution, including: '(16150, 20684) -> (15008, 20684)'
    - 10 missing entries in student solution, including: '(5249, 20754) -> (5559, 20754) -> (14800, 20754) -> (17428, 20754)'

  * filename = horizontal75.txt
    java.lang.ArrayIndexOutOfBoundsException: 300

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:169)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:781)

  * filename = horizontal100.txt
    - segments() contains the same segment more than once
    - segment 2: (13975, 1279) -> (8690, 1279)
    - segment 3: (13975, 1279) -> (8690, 1279)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (7354, 1279) -> (13975, 1279)
    - reference segment 0: (1090, 1279) -> (7354, 1279) -> (8690, 1279) -> (13975, 1279)

    - number of entries in student   solution: 198
    - number of entries in reference solution: 100
    - 118 extra entries in student solution, including: '(13207, 20636) -> (20063, 20636)'
    - 20 missing entries in student solution, including: '(5835, 20698) -> (7673, 20698) -> (16154, 20698) -> (19642, 20698)'

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    java.lang.ArrayIndexOutOfBoundsException: 4

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.horizontalSegments(TestFastCollinearPoints.java:182)
    TestFastCollinearPoints.test2b(TestFastCollinearPoints.java:224)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:784)

    - failed on trial 1 of 500
     4
     12914 12759
     12586 12759
     11782 12759
     14332 12759

  *  5 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 2: (18948, 10115) -> (16997, 10115)
    - segment 3: (18948, 10115) -> (16997, 10115)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (4931, 10115) -> (18948, 10115)
    - reference segment 0: (2570, 10115) -> (4931, 10115) -> (16997, 10115) -> (18948, 10115)

    - number of entries in student   solution: 9
    - number of entries in reference solution: 5
    - 6 extra entries in student solution, including: '(7983, 13378) -> (16552, 13378)'
    - 2 missing entries in student solution, including: '(11052, 19996) -> (15648, 19996) -> (16179, 19996) -> (18002, 19996)'

    - failed on trial 1 of 250
     20
     11052 19996
      6715 13190
     16997 10115
      2619 13629
     17654 13629
     13805 13629
     15648 19996
     20732 13190
      7922 13190
      1817 13378
     18002 19996
      2570 10115
      5747 13629
     16552 13378
      1365 13190
     16179 19996
      4931 10115
      9487 13378
      7983 13378
     18948 10115

  * 10 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 2: (20257, 1152) -> (17326, 1152)
    - segment 3: (20257, 1152) -> (17326, 1152)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (8714, 1152) -> (20257, 1152)
    - reference segment 0: (6090, 1152) -> (8714, 1152) -> (17326, 1152) -> (20257, 1152)

    - number of entries in student   solution: 18
    - number of entries in reference solution: 10
    - 10 extra entries in student solution, including: '(1452, 7652) -> (15653, 7652)'
    - 2 missing entries in student solution, including: '(2770, 15021) -> (14421, 15021) -> (20278, 15021) -> (20426, 15021)'

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 2: (19889, 1574) -> (12043, 1574)
    - segment 3: (19889, 1574) -> (12043, 1574)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (9545, 1574) -> (19889, 1574)
    - reference segment 0: (2409, 1574) -> (9545, 1574) -> (12043, 1574) -> (19889, 1574)

    - number of entries in student   solution: 29
    - number of entries in reference solution: 15
    - 17 extra entries in student solution, including: '(13282, 15899) -> (17166, 15899)'
    - 3 missing entries in student solution, including: '(6822, 19155) -> (12121, 19155) -> (17056, 19155) -> (17945, 19155)'

    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:233)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical25.txt
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:234)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical50.txt
    java.lang.ArrayIndexOutOfBoundsException: 200

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:235)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical75.txt
    java.lang.ArrayIndexOutOfBoundsException: 300

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:236)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical100.txt
    java.lang.ArrayIndexOutOfBoundsException: 400

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:237)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    java.lang.ArrayIndexOutOfBoundsException: 4

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:243)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 500
     4
      1340  3779
      1340 16614
      1340 14390
      1340  2902

  *  5 random vertical line segments
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:244)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 250
     20
     20371 14474
     20371  7702
     19854 13254
     19854  7773
      4493 19092
     19854  1430
      7886  7680
     14082 11989
     20371  5903
     14082  9675
     20371  1057
      7886 10226
      4493 20019
     19854 16576
      4493  4908
      7886  1484
     14082  9454
      4493  4936
     14082  8090
      7886 19819

  * 10 random vertical line segments
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:245)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 50

  * 15 random vertical line segments
    java.lang.ArrayIndexOutOfBoundsException: 60

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:246)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    java.lang.ArrayIndexOutOfBoundsException: 9

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:293)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input10.txt
    java.lang.ArrayIndexOutOfBoundsException: 10

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:294)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input20.txt
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:295)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input50.txt
    java.lang.ArrayIndexOutOfBoundsException: 50

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:296)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input80.txt
    java.lang.ArrayIndexOutOfBoundsException: 80

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:297)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input300.txt
    java.lang.ArrayIndexOutOfBoundsException: 300

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:298)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = inarow.txt
    java.lang.ArrayIndexOutOfBoundsException: 29

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:299)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    java.lang.ArrayIndexOutOfBoundsException: 1260

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5b(TestFastCollinearPoints.java:306)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:802)

  * filename = rs1423.txt
    java.lang.ArrayIndexOutOfBoundsException: 1423

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5b(TestFastCollinearPoints.java:308)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:802)

==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:325)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

  * filename = input40.txt
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:326)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

  * filename = input48.txt
    java.lang.ArrayIndexOutOfBoundsException: 48

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:327)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

  * filename = input299.txt
    java.lang.ArrayIndexOutOfBoundsException: 299

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:328)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

==> FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test8(TestFastCollinearPoints.java:336)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:811)

  * filename = input40.txt
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test8(TestFastCollinearPoints.java:337)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:811)

  * filename = input48.txt
    java.lang.ArrayIndexOutOfBoundsException: 48

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test8(TestFastCollinearPoints.java:338)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:811)


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
    java.lang.ArrayIndexOutOfBoundsException: 4

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.noVerticalOrHorizontalSegments(TestFastCollinearPoints.java:360)
    TestFastCollinearPoints.test9(TestFastCollinearPoints.java:378)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:814)

    - failed on trial 1 of 500
     4
     11174 14762
      1610  3566
       813  2633
     15159 19427

  *  5 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.noVerticalOrHorizontalSegments(TestFastCollinearPoints.java:360)
    TestFastCollinearPoints.test9(TestFastCollinearPoints.java:379)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:814)

    - failed on trial 1 of 500
     20
      7558  5416
     21176 15753
     15234  8166
      2354   151
     20416 15250
     10904  9341
     15856 12232
     10298  9446
     10049  8422
     10996 14196
      3996   177
      6576  8101
      9366  9876
     11238  8136
      7736  5556
      7284  5013
      7242  8106
      8256  7202
     16889 15774
      7084  3828

  * 25 random line segments
    - segments() contains the same segment more than once
    - segment 13: (12552, 5524) -> (10056, 2656)
    - segment 29: (12552, 5524) -> (10056, 2656)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 8: (2984, 712) -> (9617, 7796)
    - reference segment 12: (2381, 68) -> (2984, 712) -> (5999, 3932) -> (9617, 7796)

    - number of entries in student   solution: 58
    - number of entries in reference solution: 25
    - 35 extra entries in student solution, including: '(6016, 13156) -> (24009, 14125)'
    - 2 missing entries in student solution, including: '(6044, 11118) -> (15079, 13900) -> (17164, 14542) -> (17859, 14756)'

    - failed on trial 1 of 100

  * 50 random line segments
    - segments() contains the same segment more than once
    - segment 40: (12963, 5587) -> (10017, 5521)
    - segment 42: (12963, 5587) -> (10017, 5521)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 7: (6339, 1138) -> (10707, 15362)
    - reference segment 38: (6066, 249) -> (6339, 1138) -> (6885, 2916) -> (10707, 15362)

    - number of entries in student   solution: 110
    - number of entries in reference solution: 50
    - 63 extra entries in student solution, including: '(4927, 14474) -> (15877, 14849)'
    - 3 missing entries in student solution, including: '(11043, 11297) -> (13179, 12485) -> (16027, 14069) -> (20299, 16445)'

    - failed on trial 1 of 15

  * 100 random line segments
    - segments() contains the same segment more than once
    - segment 39: (12460, 4500) -> (12266, 3328)
    - segment 61: (12460, 4500) -> (12266, 3328)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 9: (1949, 1046) -> (6677, 7862)
    - reference segment 68: (1555, 478) -> (1949, 1046) -> (5101, 5590) -> (6677, 7862)

    - number of entries in student   solution: 221
    - number of entries in reference solution: 100
    - 131 extra entries in student solution, including: '(9017, 14221) -> (11937, 14545)'
    - 10 missing entries in student solution, including: '(7573, 13200) -> (8370, 13972) -> (9167, 14744) -> (10761, 16288)'

    - failed on trial 1 of 2

==> FAILED

Test 10: random line segments
  *  1 random line segment
    java.lang.ArrayIndexOutOfBoundsException: 4

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:412)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 500
     4
      4816  6730
      4696  6235
      4936  7225
      4744  6433

  *  5 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:413)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 500
     20
     10193 12289
     11218 14051
      7665  7414
      8088 14440
     12193  1793
      5833 12845
      8276 11268
      8835 14794
      8328 11596
      9874  6323
     11955  1065
     12771  3561
      7984  9516
      6940 13628
      9970  6875
      6243 13135
     12210  1845
     11266 14327
      9958 11994
     10052 12112

  * 25 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:414)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 100

  * 50 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 200

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:415)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 15

  * 100 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 400

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:416)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 2

==> FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 5

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:445)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 57 of 500
     5
         1     0
         8     1
         8     6
         8     8
         8     2

  * 10 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution: '(3, 8) -> (4, 8) -> (7, 8) -> (8, 8)'

    - failed on trial 4 of 500
     10
         4     5
         7     3
         5     6
         2     5
         8     8
         3     1
         3     8
         4     8
         7     8
         8     1

  * 50 random points in a 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 50

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:447)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 90

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:448)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    java.lang.ArrayIndexOutOfBoundsException: 200

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:449)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 16

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:462)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 5-by-5 grid
    java.lang.ArrayIndexOutOfBoundsException: 25

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:463)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:464)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 20-by-20 grid
    java.lang.ArrayIndexOutOfBoundsException: 400

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:465)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 5-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:466)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 6-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 24

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:467)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 10-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:468)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 15-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 60

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:469)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 25-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:470)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    java.lang.ArrayIndexOutOfBoundsException: 8

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:494)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:578)
    TestFastCollinearPoints.test13(TestFastCollinearPoints.java:593)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:826)

    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
    - failed on trial 1 of 100

  * equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:494)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:578)
    TestFastCollinearPoints.test13(TestFastCollinearPoints.java:594)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:826)

    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
    - failed on trial 1 of 100

==> FAILED

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
    java.lang.ArrayIndexOutOfBoundsException: 8

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testMutateConstructorArgument(TestFastCollinearPoints.java:607)
    TestFastCollinearPoints.test14(TestFastCollinearPoints.java:627)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:829)

  * equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testMutateConstructorArgument(TestFastCollinearPoints.java:607)
    TestFastCollinearPoints.test14(TestFastCollinearPoints.java:628)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:829)

==> FAILED

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
    java.lang.ArrayIndexOutOfBoundsException: 8

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:666)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:667)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = input40.txt
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:668)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = input48.txt
    java.lang.ArrayIndexOutOfBoundsException: 48

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:669)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = horizontal5.txt
  * filename = vertical5.txt
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:671)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = random23.txt
==> FAILED

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 5/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3640           0           3640                  164
=> passed    32   0.00       71920           0          71920                  618
=> passed    64   0.01     1270752           0        1270752                 2314
=> passed   128   0.02    21336000           0       21336000                 8865
=> passed   256   0.56   349585280           0      349585280                34363
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3776           0           3776                  164
=> passed    32   0.00       72796           0          72796                  618
=> passed    64   0.01     1274016           0        1274016                 2319
=> passed   128   0.11    21348812           0       21348812                 8869
=> passed   256   1.74   349640116           0      349640116                34376
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.01        7564       17776          43116                19845
=> passed   128   0.01       31500       86825         205150                95430
=> passed   256   0.09      128524      410701         949926               443945
=> passed   512   0.33      519180     1884448        4288076              2019473
=> passed  1024   0.44     2086924     8542809       19172542              9066670
=> passed  2048   1.51     8368140    38017157       84402454             40158775
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (84402454 / 19172542) = 2.14
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
    java.lang.ArrayIndexOutOfBoundsException: 64

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:92)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid1(TimeFastCollinearPoints.java:154)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:275)

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
    java.lang.ArrayIndexOutOfBoundsException: 64

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:92)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid4(TimeFastCollinearPoints.java:178)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:279)

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
    java.lang.ArrayIndexOutOfBoundsException: 64

    FastCollinearPoints.<init>(FastCollinearPoints.java:34)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:92)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid8(TimeFastCollinearPoints.java:203)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:283)

Total: 7/31 tests passed!


================================================================
