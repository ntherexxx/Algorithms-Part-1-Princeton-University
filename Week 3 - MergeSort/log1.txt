See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (4 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 5 warnings)

Correctness:  20/41 tests passed
Memory:       1/1 tests passed
Timing:       17/41 tests passed

Aggregate score: 57.56%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
1.7K Mar 31 03:22 BruteCollinearPoints.class
1.7K Mar 31 03:22 BruteCollinearPoints.java
1.8K Mar 31 03:22 FastCollinearPoints.class
1.8K Mar 31 03:22 FastCollinearPoints.java
2.0K Mar 31 03:22 LineSegment.java
 905 Mar 31 03:22 Point$1.class
1.9K Mar 31 03:22 Point.class
3.9K Mar 31 03:22 Point.java
2.3K Mar 31 03:22 README.md
4.2M Mar 31 03:22 Week\ 3\ -\ MergeSort.pdf


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At Point.java:[line 111]
M D ICAST_IDIV_CAST_TO_DOUBLE ICAST: Casts the result of an integral division operation to type 'double'. Did you mean to cast one (or both) of the operands to type 'double' before performing the division?  At Point.java:[line 74]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 27]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 26]
Warnings generated: 4


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:5: The private instance (or static) variable 'foundSegments' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:5: The private instance (or static) variable 'foundSegments' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:23: There appears to be a spurious semicolon. [EmptyStatementNotInLoop]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:27:27: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] FastCollinearPoints.java:23:65: Are you sure you want an empty statement here? An empty statement might indicate a superfluous semicolon. [EmptyStatement]
[WARN] FastCollinearPoints.java:27:25: Control variable 'last' is modified inside loop. [ModifiedControlVariable]
[WARN] Point.java:12:1: Unnecessary import statement for 'java.lang.Double' because it is from the package 'java.lang'. [RedundantImport]
[WARN] Point.java:12:8: Unused import statement for 'java.lang.Double'. [UnusedImports]
Checkstyle ends with 0 errors and 5 warnings.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
     Failed on trial 1 of 100000
     p, q          = (80, 28)
     p.slopeTo(q)  = 0.0
  * negative infinite slope, where p and q have coordinates in [0, 32768)
     Failed on trial 1 of 100000
     p, q          = (23129, 27027)
     p.slopeTo(q)  = 0.0
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
     Failed on trial 1 of 100000
     p                        = (184, 135)
     q                        = (484, 179)
     student   p.slopeTo(q) = 0.0
     reference p.slopeTo(q) = 0.14666666666666667
  * slopeTo(), where p and q have coordinates in [0, 32768)
     Failed on trial 1 of 100000
     p                        = (22033, 5413)
     q                        = (9807, 28044)
     student   p.slopeTo(q) = -1.0
     reference p.slopeTo(q) = -1.8510551284148535
  * slopeTo(), where p and q have coordinates in [0, 10)
     Failed on trial 2 of 100000
     p                        = (2, 4)
     q                        = (5, 3)
     student   p.slopeTo(q) = 0.0
     reference p.slopeTo(q) = -0.3333333333333333
  * throw a java.lang.NullPointerException if argument is null
==> FAILED

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
     Failed on trial 363 of 100000
     p               = (138, 189)
     q               = (366, 189)
     p.compareTo(q)  = -1
     q.compareTo(p)  = -1
  * antisymmetric, where p and q have coordinates in [0, 32768)
     Failed on trial 3636 of 100000
     p               = (14484, 21214)
     q               = (22738, 21214)
     p.compareTo(q)  = -1
     q.compareTo(p)  = -1
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
     Failed on trial 98 of 100000
     p                        = (498, 382)
     q                        = (36, 382)
     student   p.compareTo(q) = -1
     reference p.compareTo(q) = 1
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
     Failed on trial 10795 of 100000
     p                        = (22280, 27800)
     q                        = (1174, 27800)
     student   p.compareTo(q) = -1
     reference p.compareTo(q) = 1
  * sign of compareTo(), where p and q have coordinates in [0, 10)
     Failed on trial 12 of 100000
     p                        = (8, 7)
     q                        = (3, 7)
     student   p.compareTo(q) = -1
     reference p.compareTo(q) = 1
  * throw java.lang.NullPointerException exception if argument is null
==> FAILED

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
     Failed on trial 3 of 100000
     p                         = (411, 123)
     q                         = (496, 379)
     r                         = (478, 349)
     student   p.compare(q, r) = 0
     reference p.compare(q, r) = -1
     reference p.slopeTo(q)    = 3.011764705882353
     reference p.slopeTo(r)    = 3.373134328358209
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
     Failed on trial 3 of 100000
     p                         = (31580, 23872)
     q                         = (2233, 27569)
     r                         = (24153, 19068)
     student   p.compare(q, r) = 0
     reference p.compare(q, r) = -1
     reference p.slopeTo(q)    = -0.12597539782601289
     reference p.slopeTo(r)    = 0.6468291369328127
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
     Failed on trial 4 of 100000
     p                         = (6, 5)
     q                         = (8, 4)
     r                         = (9, 5)
     student   p.compare(q, r) = 0
     reference p.compare(q, r) = -1
     reference p.slopeTo(q)    = -0.5
     reference p.slopeTo(r)    = 0.0
  * throw java.lang.NullPointerException if either argument is null
==> FAILED


Total: 0/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     0

  * Point[] of length 10, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     31379 16174
     27068  5168
        93 28596
     25616 15944
     null
     17935 11899
     29991 31937
      2385 17572
      1319 23567
       661    10

  * Point[] of length 10, number of null entries = 10
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     null
     null
     null
     null
     null
     null
     null
     null
     null
     null

  * Point[] of length 4, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     4
       830 14991
      5250 22491
     20476 14899
     null

  * Point[] of length 3, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     3
     15780  3690
      1164 32392
     null

  * Point[] of length 2, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     2
     null
     15969  5835

  * Point[] of length 1, number of null entries = 1
    - constructor fails to throw an exception
     1
     null

==> FAILED

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 16/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    java.lang.ArrayIndexOutOfBoundsException: 8

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:156)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:157)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input40.txt
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:158)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input48.txt
    java.lang.ArrayIndexOutOfBoundsException: 48

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:159)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input299.txt
    java.lang.ArrayIndexOutOfBoundsException: 299

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:160)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains the same segment more than once
    - segment 2: (16307, 4652) -> (9972, 4652)
    - segment 3: (16307, 4652) -> (9972, 4652)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (5766, 4652) -> (16307, 4652)
    - reference segment 0: (4750, 4652) -> (5766, 4652) -> (9972, 4652) -> (16307, 4652)

    - number of entries in student   solution: 8
    - number of entries in reference solution: 5
    - 6 extra entries in student solution, including: '(13832, 7657) -> (12772, 7657)'
    - 3 missing entries in student solution, including: '(2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)'

  * filename = horizontal25.txt
    - segments() contains the same segment more than once
    - segment 2: (19615, 1256) -> (16419, 1256)
    - segment 3: (19615, 1256) -> (16419, 1256)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (13505, 1256) -> (19615, 1256)
    - reference segment 0: (10021, 1256) -> (13505, 1256) -> (16419, 1256) -> (19615, 1256)

    - number of entries in student   solution: 59
    - number of entries in reference solution: 25
    - 38 extra entries in student solution, including: '(15665, 20333) -> (20780, 20333)'
    - 4 missing entries in student solution, including: '(8784, 20913) -> (9880, 20913) -> (16352, 20913) -> (19666, 20913)'

  * filename = horizontal50.txt
    - segments() contains the same segment more than once
    - segment 2: (15579, 1040) -> (8302, 1040)
    - segment 3: (15579, 1040) -> (8302, 1040)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (4459, 1040) -> (15579, 1040)
    - reference segment 0: (2624, 1040) -> (4459, 1040) -> (8302, 1040) -> (15579, 1040)

    - number of entries in student   solution: 112
    - number of entries in reference solution: 50
    - 72 extra entries in student solution, including: '(16150, 20684) -> (15008, 20684)'
    - 10 missing entries in student solution, including: '(5249, 20754) -> (5559, 20754) -> (14800, 20754) -> (17428, 20754)'

  * filename = horizontal75.txt
    java.lang.ArrayIndexOutOfBoundsException: 300

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:169)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:781)

  * filename = horizontal100.txt
    - segments() contains the same segment more than once
    - segment 2: (13975, 1279) -> (8690, 1279)
    - segment 3: (13975, 1279) -> (8690, 1279)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (7354, 1279) -> (13975, 1279)
    - reference segment 0: (1090, 1279) -> (7354, 1279) -> (8690, 1279) -> (13975, 1279)

    - number of entries in student   solution: 198
    - number of entries in reference solution: 100
    - 118 extra entries in student solution, including: '(13207, 20636) -> (20063, 20636)'
    - 20 missing entries in student solution, including: '(5835, 20698) -> (7673, 20698) -> (16154, 20698) -> (19642, 20698)'

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    java.lang.ArrayIndexOutOfBoundsException: 4

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.horizontalSegments(TestFastCollinearPoints.java:182)
    TestFastCollinearPoints.test2b(TestFastCollinearPoints.java:224)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:784)

    - failed on trial 1 of 500
     4
     14384  3026
     14789  3026
      3883  3026
      7587  3026

  *  5 random horizontal line segments
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.horizontalSegments(TestFastCollinearPoints.java:182)
    TestFastCollinearPoints.test2b(TestFastCollinearPoints.java:225)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:784)

    - failed on trial 1 of 250
     20
      8185  3459
      7439 11130
      7623 11302
     19152  3459
     16516 17987
      4827 11130
     18343 17987
      7980 11130
      7911 19457
     18283 11130
     13853 17987
      2533  3459
     12781 11302
      2394 17987
     11401  3459
      1430 19457
      2106 19457
     16735 11302
      2694 11302
     10429 19457

  * 10 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 2: (11445, 2061) -> (6650, 2061)
    - segment 3: (11445, 2061) -> (6650, 2061)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (4145, 2061) -> (11445, 2061)
    - reference segment 0: (3415, 2061) -> (4145, 2061) -> (6650, 2061) -> (11445, 2061)

    - number of entries in student   solution: 19
    - number of entries in reference solution: 10
    - 12 extra entries in student solution, including: '(2080, 10409) -> (20026, 10409)'
    - 3 missing entries in student solution, including: '(7131, 13877) -> (12154, 13877) -> (12487, 13877) -> (16104, 13877)'

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 2: (18353, 3320) -> (17863, 3320)
    - segment 3: (18353, 3320) -> (17863, 3320)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (17753, 3320) -> (18353, 3320)
    - reference segment 0: (9458, 3320) -> (17753, 3320) -> (17863, 3320) -> (18353, 3320)

    - number of entries in student   solution: 31
    - number of entries in reference solution: 15
    - 18 extra entries in student solution, including: '(10256, 17859) -> (20212, 17859)'
    - 2 missing entries in student solution, including: '(4382, 18106) -> (7429, 18106) -> (8809, 18106) -> (17093, 18106)'

    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:233)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical25.txt
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:234)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical50.txt
    java.lang.ArrayIndexOutOfBoundsException: 200

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:235)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical75.txt
    java.lang.ArrayIndexOutOfBoundsException: 300

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:236)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical100.txt
    java.lang.ArrayIndexOutOfBoundsException: 400

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:237)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    java.lang.ArrayIndexOutOfBoundsException: 4

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:243)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 500
     4
     15422 12825
     15422  8776
     15422 12041
     15422  5631

  *  5 random vertical line segments
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:244)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 250
     20
     17550 10530
      5084 17097
     19509  6142
      1073 11442
      1073 13365
     19509  9204
     19509  8917
      5084 15128
     13969  5390
      5084 15844
     13969  8352
     17550  4843
     19509 12442
     13969 15208
      1073 18319
     13969  9342
      1073 17833
      5084  7786
     17550  5724
     17550  6348

  * 10 random vertical line segments
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:245)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 50

  * 15 random vertical line segments
    java.lang.ArrayIndexOutOfBoundsException: 60

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:246)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    java.lang.ArrayIndexOutOfBoundsException: 9

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:293)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input10.txt
    java.lang.ArrayIndexOutOfBoundsException: 10

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:294)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input20.txt
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:295)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input50.txt
    java.lang.ArrayIndexOutOfBoundsException: 50

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:296)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input80.txt
    java.lang.ArrayIndexOutOfBoundsException: 80

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:297)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input300.txt
    java.lang.ArrayIndexOutOfBoundsException: 300

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:298)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = inarow.txt
    java.lang.ArrayIndexOutOfBoundsException: 29

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:299)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    java.lang.ArrayIndexOutOfBoundsException: 1260

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5b(TestFastCollinearPoints.java:306)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:802)

  * filename = rs1423.txt
    java.lang.ArrayIndexOutOfBoundsException: 1423

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5b(TestFastCollinearPoints.java:308)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:802)

==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:325)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

  * filename = input40.txt
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:326)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

  * filename = input48.txt
    java.lang.ArrayIndexOutOfBoundsException: 48

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:327)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

  * filename = input299.txt
    java.lang.ArrayIndexOutOfBoundsException: 299

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:328)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

==> FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test8(TestFastCollinearPoints.java:336)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:811)

  * filename = input40.txt
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test8(TestFastCollinearPoints.java:337)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:811)

  * filename = input48.txt
    java.lang.ArrayIndexOutOfBoundsException: 48

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test8(TestFastCollinearPoints.java:338)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:811)


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
    java.lang.ArrayIndexOutOfBoundsException: 4

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.noVerticalOrHorizontalSegments(TestFastCollinearPoints.java:360)
    TestFastCollinearPoints.test9(TestFastCollinearPoints.java:378)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:814)

    - failed on trial 1 of 500
     4
       876 10928
     21162 16931
     14988 15104
      1758 11189

  *  5 random line segments
    - segments() contains the same segment more than once
    - segment 3: (19643, 10273) -> (7527, 4319)
    - segment 5: (19643, 10273) -> (7527, 4319)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (3799, 2487) -> (19643, 10273)
    - reference segment 1: (1003, 1113) -> (3799, 2487) -> (7527, 4319) -> (19643, 10273)

    - number of entries in student   solution: 12
    - number of entries in reference solution: 5
    - 7 extra entries in student solution, including: '(6230, 14098) -> (11918, 14662)'

    - failed on trial 1 of 500
     20
      4040 13000
      4334 13910
      5001  8037
      7527  4319
      3799  2487
      7157  9408
      4421  6186
      7613  9945
     21741 19629
      3471 12517
       317  1353
      1003  1113
     10868 18796
      1195 10585
      8721 10613
     10581 11901
     11918 14662
     19643 10273
      2912 13769
      6230 14098

  * 25 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.noVerticalOrHorizontalSegments(TestFastCollinearPoints.java:360)
    TestFastCollinearPoints.test9(TestFastCollinearPoints.java:380)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:814)

    - failed on trial 1 of 100

  * 50 random line segments
    - segments() contains the same segment more than once
    - segment 22: (14512, 5992) -> (14410, 2048)
    - segment 58: (14512, 5992) -> (14410, 2048)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 7: (14380, 888) -> (14512, 5992)
    - reference segment 49: (14374, 656) -> (14380, 888) -> (14410, 2048) -> (14512, 5992)

    - number of entries in student   solution: 115
    - number of entries in reference solution: 50
    - 66 extra entries in student solution, including: '(10500, 14103) -> (12210, 15865)'
    - 1 missing entry in student solution: '(5013, 10637) -> (6053, 12577) -> (8653, 17427) -> (9173, 18397)'

    - failed on trial 1 of 15

  * 100 random line segments
    - segments() contains the same segment more than once
    - segment 18: (13582, 4138) -> (13538, 1498)
    - segment 52: (13582, 4138) -> (13538, 1498)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 8: (13527, 838) -> (13582, 4138)
    - reference segment 99: (13516, 178) -> (13527, 838) -> (13538, 1498) -> (13582, 4138)

    - number of entries in student   solution: 220
    - number of entries in reference solution: 100
    - 129 extra entries in student solution, including: '(8124, 15018) -> (9774, 16584)'
    - 9 missing entries in student solution, including: '(11448, 13054) -> (12009, 13859) -> (12570, 14664) -> (13692, 16274)'

    - failed on trial 1 of 2

==> FAILED

Test 10: random line segments
  *  1 random line segment
    java.lang.ArrayIndexOutOfBoundsException: 4

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:412)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 500
     4
     14497  6742
     14552  7062
     14409  6230
     14607  7382

  *  5 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:413)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 500
     20
      6659 13360
      6659 13094
     12038  5898
      3779  4556
      4140  7554
      6659 12885
      5460  9254
      9070  2400
      6465  5168
      3678  6959
      3305  4448
      8118  1278
      8262  7072
      3572  1578
      6862  5432
      6659 12790
      8566  1806
      3502  1496
      8361  5600
      7242 11549

  * 25 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:414)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 100

  * 50 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 200

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:415)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 15

  * 100 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 400

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:416)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 2

==> FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 5

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:445)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 13 of 500
     5
         9     0
         9     9
         9     3
         9     2
         7     5

  * 10 random points in a 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 10

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:446)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 2 of 500
     10
         2     5
         6     8
         9     0
         2     0
         9     6
         5     3
         2     2
         2     6
         3     5
         3     3

  * 50 random points in a 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 50

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:447)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 90

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:448)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    java.lang.ArrayIndexOutOfBoundsException: 200

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:449)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 16

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:462)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 5-by-5 grid
    java.lang.ArrayIndexOutOfBoundsException: 25

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:463)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:464)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 20-by-20 grid
    java.lang.ArrayIndexOutOfBoundsException: 400

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:465)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 5-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:466)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 6-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 24

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:467)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 10-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:468)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 15-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 60

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:469)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 25-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:470)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    java.lang.ArrayIndexOutOfBoundsException: 8

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:494)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:578)
    TestFastCollinearPoints.test13(TestFastCollinearPoints.java:593)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:826)

    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
    - failed on trial 1 of 100

  * equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:494)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:578)
    TestFastCollinearPoints.test13(TestFastCollinearPoints.java:594)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:826)

    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
    - failed on trial 1 of 100

==> FAILED

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
    java.lang.ArrayIndexOutOfBoundsException: 8

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testMutateConstructorArgument(TestFastCollinearPoints.java:607)
    TestFastCollinearPoints.test14(TestFastCollinearPoints.java:627)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:829)

  * equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testMutateConstructorArgument(TestFastCollinearPoints.java:607)
    TestFastCollinearPoints.test14(TestFastCollinearPoints.java:628)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:829)

==> FAILED

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
    java.lang.ArrayIndexOutOfBoundsException: 8

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:666)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:667)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = input40.txt
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:668)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = input48.txt
    java.lang.ArrayIndexOutOfBoundsException: 48

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:669)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = horizontal5.txt
  * filename = vertical5.txt
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:29)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:671)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = random23.txt
==> FAILED

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     0

  * Point[] of length 10, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     14721 29620
     28434  5327
     null
     19835 12393
     17114 30957
     22084    69
      1063 21791
      4780  4711
      4382 27670
     17395 12724

  * Point[] of length 10, number of null entries = 10
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     null
     null
     null
     null
     null
     null
     null
     null
     null
     null

  * Point[] of length 4, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     4
     12006 19991
     null
     29658 23932
     27942 30137

  * Point[] of length 3, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     3
      6834 29745
     22209 29737
     null

  * Point[] of length 2, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     2
      9603  2141
     null

  * Point[] of length 1, number of null entries = 1
    - constructor fails to throw an exception
     1
     null

==> FAILED

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 4/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3640           0           3640                  167
=> passed    32   0.00       71920           0          71920                  620
=> passed    64   0.01     1270752           0        1270752                 2318
=> passed   128   0.04    21336000           0       21336000                 8864
=> passed   256   0.38   349585280           0      349585280                34372
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3832           0           3832                  166
=> passed    32   0.00       72612           0          72612                  620
=> passed    64

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
