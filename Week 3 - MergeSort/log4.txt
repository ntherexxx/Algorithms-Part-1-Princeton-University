See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (2 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 1 warning)

Correctness:  23/41 tests passed
Memory:       1/1 tests passed
Timing:       17/41 tests passed

Aggregate score: 61.95%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
1.8K Mar 31 04:01 BruteCollinearPoints.java
1.8K Mar 31 04:01 FastCollinearPoints.java
2.0K Mar 31 04:01 LineSegment.java
4.0K Mar 31 04:01 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 28]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 27]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] FastCollinearPoints.java:28:25: Control variable 'last' is modified inside loop. [ModifiedControlVariable]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     0

  * Point[] of length 10, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     13843  1573
     23663  8478
     18856  6358
      6964 20283
     null
     32028 27403
     21650  9261
     21367  4955
     32748 20084
     11680 31931

  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     3
     26343 30148
     null
     24704 13107

  * Point[] of length 2, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     2
     26357 29425
     null

  * Point[] of length 1, number of null entries = 1
    - constructor fails to throw an exception
     1
     null

==> FAILED

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 16/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    java.lang.ArrayIndexOutOfBoundsException: 8

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:156)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:157)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input40.txt
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:158)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input48.txt
    java.lang.ArrayIndexOutOfBoundsException: 48

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:159)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input299.txt
    java.lang.ArrayIndexOutOfBoundsException: 299

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:160)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains the same segment more than once
    - segment 2: (16307, 4652) -> (9972, 4652)
    - segment 3: (16307, 4652) -> (9972, 4652)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (5766, 4652) -> (16307, 4652)
    - reference segment 0: (4750, 4652) -> (5766, 4652) -> (9972, 4652) -> (16307, 4652)

    - number of entries in student   solution: 8
    - number of entries in reference solution: 5
    - 6 extra entries in student solution, including: '(13832, 7657) -> (12772, 7657)'
    - 3 missing entries in student solution, including: '(2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)'

  * filename = horizontal25.txt
    - segments() contains the same segment more than once
    - segment 2: (19615, 1256) -> (16419, 1256)
    - segment 3: (19615, 1256) -> (16419, 1256)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (13505, 1256) -> (19615, 1256)
    - reference segment 0: (10021, 1256) -> (13505, 1256) -> (16419, 1256) -> (19615, 1256)

    - number of entries in student   solution: 59
    - number of entries in reference solution: 25
    - 38 extra entries in student solution, including: '(15665, 20333) -> (20780, 20333)'
    - 4 missing entries in student solution, including: '(8784, 20913) -> (9880, 20913) -> (16352, 20913) -> (19666, 20913)'

  * filename = horizontal50.txt
    - segments() contains the same segment more than once
    - segment 2: (15579, 1040) -> (8302, 1040)
    - segment 3: (15579, 1040) -> (8302, 1040)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (4459, 1040) -> (15579, 1040)
    - reference segment 0: (2624, 1040) -> (4459, 1040) -> (8302, 1040) -> (15579, 1040)

    - number of entries in student   solution: 112
    - number of entries in reference solution: 50
    - 72 extra entries in student solution, including: '(16150, 20684) -> (15008, 20684)'
    - 10 missing entries in student solution, including: '(5249, 20754) -> (5559, 20754) -> (14800, 20754) -> (17428, 20754)'

  * filename = horizontal75.txt
    java.lang.ArrayIndexOutOfBoundsException: 300

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:169)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:781)

  * filename = horizontal100.txt
    - segments() contains the same segment more than once
    - segment 2: (13975, 1279) -> (8690, 1279)
    - segment 3: (13975, 1279) -> (8690, 1279)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (7354, 1279) -> (13975, 1279)
    - reference segment 0: (1090, 1279) -> (7354, 1279) -> (8690, 1279) -> (13975, 1279)

    - number of entries in student   solution: 198
    - number of entries in reference solution: 100
    - 118 extra entries in student solution, including: '(13207, 20636) -> (20063, 20636)'
    - 20 missing entries in student solution, including: '(5835, 20698) -> (7673, 20698) -> (16154, 20698) -> (19642, 20698)'

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    java.lang.ArrayIndexOutOfBoundsException: 4

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.horizontalSegments(TestFastCollinearPoints.java:182)
    TestFastCollinearPoints.test2b(TestFastCollinearPoints.java:224)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:784)

    - failed on trial 1 of 500
     4
      1190 10867
      7653 10867
      6901 10867
      6909 10867

  *  5 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 2: (12554, 1348) -> (11008, 1348)
    - segment 3: (12554, 1348) -> (11008, 1348)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (8745, 1348) -> (12554, 1348)
    - reference segment 0: (6981, 1348) -> (8745, 1348) -> (11008, 1348) -> (12554, 1348)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 5
    - 7 extra entries in student solution, including: '(9741, 10995) -> (5761, 10995)'
    - 2 missing entries in student solution, including: '(4582, 20554) -> (5927, 20554) -> (6563, 20554) -> (8271, 20554)'

    - failed on trial 1 of 250
     20
      6981  1348
      8745  1348
     12554  1348
      6313 11657
      3144 10995
     17130 11657
      6563 20554
      9741 10995
      5927 20554
      4582 20554
     11008  1348
      5761 10995
      3749 11657
     18372  3415
      2198 10995
     12096  3415
      8948 11657
      1812  3415
      8271 20554
      3085  3415

  * 10 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 2: (19578, 1307) -> (14273, 1307)
    - segment 3: (19578, 1307) -> (14273, 1307)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (9659, 1307) -> (19578, 1307)
    - reference segment 0: (8197, 1307) -> (9659, 1307) -> (14273, 1307) -> (19578, 1307)

    - number of entries in student   solution: 21
    - number of entries in reference solution: 10
    - 13 extra entries in student solution, including: '(15511, 18673) -> (18025, 18673)'
    - 2 missing entries in student solution, including: '(3567, 20412) -> (7558, 20412) -> (7930, 20412) -> (8418, 20412)'

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 2: (8583, 2944) -> (7630, 2944)
    - segment 3: (8583, 2944) -> (7630, 2944)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (6832, 2944) -> (8583, 2944)
    - reference segment 0: (1306, 2944) -> (6832, 2944) -> (7630, 2944) -> (8583, 2944)

    - number of entries in student   solution: 34
    - number of entries in reference solution: 15
    - 21 extra entries in student solution, including: '(16606, 19724) -> (12208, 19724)'
    - 2 missing entries in student solution, including: '(2424, 19952) -> (6264, 19952) -> (8833, 19952) -> (20802, 19952)'

    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:233)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical25.txt
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:234)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical50.txt
    java.lang.ArrayIndexOutOfBoundsException: 200

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:235)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical75.txt
    java.lang.ArrayIndexOutOfBoundsException: 300

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:236)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical100.txt
    java.lang.ArrayIndexOutOfBoundsException: 400

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:237)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    java.lang.ArrayIndexOutOfBoundsException: 4

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:243)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 500
     4
      4962 11576
      4962 11436
      4962 11630
      4962 16894

  *  5 random vertical line segments
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:244)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 250
     20
     16883 20110
      9301  3493
      9996 10694
     16858  6740
     13935 11541
     16858 15823
     13935 20103
     16883  4558
      9996 15668
      9301  3455
     16858  1531
     13935 10001
     16883 15472
      9301  1614
      9301  4343
      9996 13570
      9996  4643
     16858 11422
     16883  6302
     13935 14212

  * 10 random vertical line segments
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:245)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 50

  * 15 random vertical line segments
    java.lang.ArrayIndexOutOfBoundsException: 60

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:246)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    java.lang.ArrayIndexOutOfBoundsException: 9

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:293)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input10.txt
    java.lang.ArrayIndexOutOfBoundsException: 10

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:294)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input20.txt
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:295)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input50.txt
    java.lang.ArrayIndexOutOfBoundsException: 50

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:296)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input80.txt
    java.lang.ArrayIndexOutOfBoundsException: 80

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:297)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input300.txt
    java.lang.ArrayIndexOutOfBoundsException: 300

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:298)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = inarow.txt
    java.lang.ArrayIndexOutOfBoundsException: 29

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:299)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    java.lang.ArrayIndexOutOfBoundsException: 1260

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5b(TestFastCollinearPoints.java:306)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:802)

  * filename = rs1423.txt
    java.lang.ArrayIndexOutOfBoundsException: 1423

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5b(TestFastCollinearPoints.java:308)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:802)

==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:325)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

  * filename = input40.txt
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:326)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

  * filename = input48.txt
    java.lang.ArrayIndexOutOfBoundsException: 48

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:327)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

  * filename = input299.txt
    java.lang.ArrayIndexOutOfBoundsException: 299

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:328)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

==> FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test8(TestFastCollinearPoints.java:336)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:811)

  * filename = input40.txt
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test8(TestFastCollinearPoints.java:337)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:811)

  * filename = input48.txt
    java.lang.ArrayIndexOutOfBoundsException: 48

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test8(TestFastCollinearPoints.java:338)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:811)


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
    java.lang.ArrayIndexOutOfBoundsException: 4

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.noVerticalOrHorizontalSegments(TestFastCollinearPoints.java:360)
    TestFastCollinearPoints.test9(TestFastCollinearPoints.java:378)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:814)

    - failed on trial 1 of 500
     4
     11173 11352
      9256  8973
      8617  8180
     15007 16110

  *  5 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.noVerticalOrHorizontalSegments(TestFastCollinearPoints.java:360)
    TestFastCollinearPoints.test9(TestFastCollinearPoints.java:379)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:814)

    - failed on trial 1 of 500
     20
     13840  8441
     14492 12667
      8299 16348
       974  5323
      9178 17671
      2439  7528
     13465  6431
      5981  6769
     13090  4421
      5738  5618
      4164  3680
      5780  4186
     14715 13131
      6986 19684
     11247 12401
     13930 10689
     15616 16623
      7312  7556
      6115  8491
     15054 14645

  * 25 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.noVerticalOrHorizontalSegments(TestFastCollinearPoints.java:360)
    TestFastCollinearPoints.test9(TestFastCollinearPoints.java:380)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:814)

    - failed on trial 1 of 100

  * 50 random line segments
    - segments() contains the same segment more than once
    - segment 52: (12966, 6842) -> (11964, 5336)
    - segment 67: (12966, 6842) -> (11964, 5336)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 6: (4568, 1216) -> (7818, 13866)
    - reference segment 44: (4438, 710) -> (4568, 1216) -> (5218, 3746) -> (7818, 13866)

    - number of entries in student   solution: 109
    - number of entries in reference solution: 50
    - 64 extra entries in student solution, including: '(9343, 10988) -> (17560, 18061)'
    - 5 missing entries in student solution, including: '(9316, 15030) -> (11588, 18058) -> (12156, 18815) -> (12724, 19572)'

    - failed on trial 1 of 15

  * 100 random line segments
    - segments() contains the same segment more than once
    - segment 74: (7390, 4838) -> (6942, 4492)
    - segment 79: (7390, 4838) -> (6942, 4492)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 9: (1052, 592) -> (12917, 9457)
    - reference segment 37: (261, 1) -> (1052, 592) -> (4216, 2956) -> (12917, 9457)

    - number of entries in student   solution: 215
    - number of entries in reference solution: 100
    - 124 extra entries in student solution, including: '(11030, 14841) -> (14790, 16996)'
    - 9 missing entries in student solution, including: '(7105, 13202) -> (7857, 13727) -> (11617, 16352) -> (14625, 18452)'

    - failed on trial 1 of 2

==> FAILED

Test 10: random line segments
  *  1 random line segment
    java.lang.ArrayIndexOutOfBoundsException: 4

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:412)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 500
     4
     12908  7781
     10588  7085
     12588  7685
      9788  6845

  *  5 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:413)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 500
     20
      7966  8558
      7156  5292
     11954  8872
     12458  9026
      8066  7684
      7112  3136
      8299 12328
      8051  8558
     10837 13678
      7108  2940
      7850  7618
      7796  8558
      3617 11261
      6936 11603
      7582 13471
      8675 12528
      8076  8558
      7114  3234
      7643 13505
      4288 11635

  * 25 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:414)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 100

  * 50 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 200

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:415)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 15

  * 100 random line segments
    java.lang.ArrayIndexOutOfBoundsException: 400

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:394)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:416)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:817)

    - failed on trial 1 of 2

==> FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution: '(3, 5) -> (4, 6) -> (5, 7) -> (7, 9)'

    - failed on trial 89 of 500
     5
         3     0
         4     6
         5     7
         7     9
         3     5

  * 10 random points in a 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 10

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:446)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 28 of 500
     10
         5     9
         5     0
         9     6
         5     7
         9     3
         0     4
         8     2
         7     7
         5     2
         9     1

  * 50 random points in a 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 50

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:447)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 90

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:448)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    java.lang.ArrayIndexOutOfBoundsException: 200

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:449)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 16

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:462)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 5-by-5 grid
    java.lang.ArrayIndexOutOfBoundsException: 25

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:463)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:464)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 20-by-20 grid
    java.lang.ArrayIndexOutOfBoundsException: 400

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:465)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 5-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:466)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 6-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 24

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:467)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 10-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:468)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 15-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 60

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:469)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 25-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:470)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    java.lang.ArrayIndexOutOfBoundsException: 8

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:494)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:578)
    TestFastCollinearPoints.test13(TestFastCollinearPoints.java:593)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:826)

    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
    - failed on trial 1 of 100

  * equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:494)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:578)
    TestFastCollinearPoints.test13(TestFastCollinearPoints.java:594)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:826)

    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
    - failed on trial 1 of 100

==> FAILED

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
    java.lang.ArrayIndexOutOfBoundsException: 8

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testMutateConstructorArgument(TestFastCollinearPoints.java:607)
    TestFastCollinearPoints.test14(TestFastCollinearPoints.java:627)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:829)

  * equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testMutateConstructorArgument(TestFastCollinearPoints.java:607)
    TestFastCollinearPoints.test14(TestFastCollinearPoints.java:628)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:829)

==> FAILED

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
    java.lang.ArrayIndexOutOfBoundsException: 8

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:666)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = equidistant.txt
    java.lang.ArrayIndexOutOfBoundsException: 15

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:667)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = input40.txt
    java.lang.ArrayIndexOutOfBoundsException: 40

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:668)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = input48.txt
    java.lang.ArrayIndexOutOfBoundsException: 48

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:669)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = horizontal5.txt
  * filename = vertical5.txt
    java.lang.ArrayIndexOutOfBoundsException: 20

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TestFastCollinearPoints.testNumberOfSegments(TestFastCollinearPoints.java:635)
    TestFastCollinearPoints.fileNumberOfSegments(TestFastCollinearPoints.java:661)
    TestFastCollinearPoints.test15(TestFastCollinearPoints.java:671)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:832)

  * filename = random23.txt
==> FAILED

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     0

  * Point[] of length 10, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     20484 24675
     29698 19042
      2520 30404
     null
     27999 14792
     15879  8135
     22979 15906
     13997 26079
     12372 12360
     30653 24968

  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     4
     28938  7622
     28057 23085
      8531 17168
     null

  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     2
     12685 22870
     null

  * Point[] of length 1, number of null entries = 1
    - constructor fails to throw an exception
     1
     null

==> FAILED

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 4/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3640           0           3640                  168
=> passed    32   0.00       71920           0          71920                  624
=> passed    64   0.01     1270752           0        1270752                 2323
=> passed   128   0.02    21336000           0       21336000                 8864
=> passed   256   0.59   349585280           0      349585280                34368
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3802           0           3802                  169
=> passed    32   0.00       72626           0          72626                  619
=> passed    64   0.01     1273862           0        1273862                 2316
=> passed   128   0.11    21349692           0       21349692                 8863
=> passed   256   1.64   349640052           0      349640052                34385
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.01        7564       17652          42868                20095
=> passed   128   0.02       31500       86675         204850                95239
=> passed   256   0.07      128524      411460         951444               443880
=> passed   512   0.27      519180     1885365        4289910              2013777
=> passed  1024   0.40     2086924     8529058       19145040              9055481
=> passed  2048   1.55     8368140    38003751       84375642             40160008
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (84375642 / 19145040) = 2.14
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
    java.lang.ArrayIndexOutOfBoundsException: 64

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:92)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid1(TimeFastCollinearPoints.java:154)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:275)

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
    java.lang.ArrayIndexOutOfBoundsException: 64

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:92)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid4(TimeFastCollinearPoints.java:178)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:279)

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
    java.lang.ArrayIndexOutOfBoundsException: 64

    FastCollinearPoints.<init>(FastCollinearPoints.java:30)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:92)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid8(TimeFastCollinearPoints.java:203)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:283)

Total: 7/31 tests passed!


================================================================
