See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED (0 errors, 3 warnings)
API:          PASSED

Findbugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  22/43 tests passed
Memory:       74/78 tests passed
Timing:       74/136 tests passed

Aggregate score: 61.07%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
1.5K Mar 20 20:45 Deque$ListIterator.class
1.1K Mar 20 20:45 Deque$Node.class
3.0K Mar 20 20:45 Deque.class
3.7K Mar 20 20:45 Deque.java
1.3K Mar 20 20:45 Permutation.class
 602 Mar 20 20:45 Permutation.java
 508 Mar 20 20:45 README.md
1.5K Mar 20 20:45 RandomizedQueue$ListIterator.class
2.8K Mar 20 20:45 RandomizedQueue.class
3.3K Mar 20 20:45 RandomizedQueue.java
5.4M Mar 20 20:45 Week\ 2\ -\ Stack\ and\ Queue.pdf
  17 Mar 20 20:45 distinct.txt
  24 Mar 20 20:45 duplicates.txt
 59K Mar 20 20:45 log1.txt
 106 Mar 20 20:45 mediumTale.txt
  21 Mar 20 20:45 permutation10.txt
   8 Mar 20 20:45 permutation4.txt
  10 Mar 20 20:45 permutation5.txt
  12 Mar 20 20:45 permutation6.txt
  16 Mar 20 20:45 permutation8.txt
761K Mar 20 20:45 tale.txt
  50 Mar 20 20:45 tinyTale.txt


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------

% javac RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:13: warning: [unchecked] unchecked cast
        s = (Item[]) new Object[capacity];
                     ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:32: warning: [unchecked] unchecked cast
            Item[] tmp = (Item[]) new Object[capacity];
                                  ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:58: warning: [unchecked] unchecked cast
            Item[] tmp = (Item[]) new Object[capacity];
                                  ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
3 warnings

% javac Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Deque.java
*-----------------------------------------------------------

% custom checkstyle checks for RandomizedQueue.java
*-----------------------------------------------------------

% custom checkstyle checks for Permutation.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: check random calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: check random calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 4: check random calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 5: check random calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 6: check random calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size()
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
==> passed

Test 7: check removeFirst() and removeLast() from an empty deque
  * removeFirst()
  * removeLast()
==> passed

Test 8: check whether two Deque objects can be created at the same time
==> passed

Test 9: check iterator() after n calls to addFirst()
  * n = 10
  * n = 50
==> passed

Test 10: check iterator() after each of m intermixed calls to
         addFirst(), addLast(), removeFirst(), and removeLast()
  * m = 20
  * m = 50
  * m = 100
  * m = 1000
==> passed

Test 11: create two nested iterators to same deque
  * n = 10
  * n = 50
==> passed

Test 12: create two parallel iterators to same deque
==> passed

Test 13: create Deque objects of different parameterized types
==> passed

Test 14: call addFirst() and addLast() with null argument
    - throws wrong exception when calling addFirst() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

    - throws wrong exception when calling addLast() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 15: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 16: call iterator() when the deque is empty
==> passed


Total: 15/16 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
    - failed on operation 40 of 50
    - dequeue() returned item 18
    - but item 18 is no longer in randomized queue

  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
    - failed on operation 102 of 500
    - dequeue() returned item 446
    - but item 446 is no longer in randomized queue

  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
    - failed on operation 133 of 1000
    - dequeue() returned item 329
    - but item 329 is no longer in randomized queue

  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 1

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test2(TestRandomizedQueue.java:749)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1170)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.isEmpty()     ==> true
         rq.enqueue(41)
         rq.isEmpty()     ==> false
         rq.isEmpty()     ==> false
         rq.enqueue(26)
         rq.dequeue()     ==> 26
         rq.dequeue()

  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 1

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test2(TestRandomizedQueue.java:750)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1170)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.isEmpty()     ==> true
         rq.size()        ==> 0
         rq.enqueue(134)
         rq.enqueue(394)
         rq.dequeue()     ==> 394
         rq.dequeue()

  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 1

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test2(TestRandomizedQueue.java:751)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1170)

==> FAILED

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==> passed

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 11 of 50
    - sample() returned item 26
    - but item 26 is no longer in randomized queue

  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 110 of 500
    - dequeue() returned item 259
    - but item 259 is no longer in randomized queue

  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 59 of 1000
    - dequeue() returned item 94
    - but item 94 is no longer in randomized queue

  *    5 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *   50 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 1

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:777)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1176)

  *  500 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 1

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:778)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1176)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.isEmpty()     ==> true
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.enqueue(213)
         rq.size()        ==> 1
         rq.enqueue(466)
         rq.sample()      ==> 213
         rq.dequeue()     ==> 213
         rq.size()        ==> 1
         rq.isEmpty()     ==> false
         rq.dequeue()

  * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 2

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:779)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1176)

==> FAILED

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
     java.util.NoSuchElementException not thrown
==> FAILED

Test 6: create multiple randomized queue objects at the same time
  * n = 10
    java.lang.ArrayIndexOutOfBoundsException: 8

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.checkTwoRandomizedQueues(TestRandomizedQueue.java:264)
    TestRandomizedQueue.test6(TestRandomizedQueue.java:821)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1182)

  * n = 100
    java.lang.ArrayIndexOutOfBoundsException: 64

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.checkTwoRandomizedQueues(TestRandomizedQueue.java:264)
    TestRandomizedQueue.test6(TestRandomizedQueue.java:822)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1182)

==> FAILED

Test 7: check that iterator() returns correct items after a sequence
        of n enqueue() operations
  * n = 10
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to next() and hasNext() exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  * n = 50
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to next() and hasNext() exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 8: check that iterator() returns correct items after sequence
        of m enqueue() and dequeue() operations
  * m = 10
    java.lang.ArrayIndexOutOfBoundsException: 2

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.checkIteratorAfterEnqueueDequeue(TestRandomizedQueue.java:872)
    TestRandomizedQueue.test8(TestRandomizedQueue.java:902)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1188)

  * m = 1000
    java.lang.ArrayIndexOutOfBoundsException: 8

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.checkIteratorAfterEnqueueDequeue(TestRandomizedQueue.java:872)
    TestRandomizedQueue.test8(TestRandomizedQueue.java:903)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1188)

==> FAILED

Test 9: create two nested iterators over the same randomized queue
  * n = 10
    - inner iterator returned more than 10 items

  * n = 50
    - inner iterator returned more than 50 items

==> FAILED

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
    - student   iterator 1 hasNext() = true
    - student   iterator 2 hasNext() = true
    - reference iterator   hasNext() = false

  * n = 50
    - student   iterator 1 hasNext() = true
    - student   iterator 2 hasNext() = true
    - reference iterator   hasNext() = false

==> FAILED

Test 11: create two iterators over different randomized queues
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to next() and hasNext() exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 12: create RandomizedQueue objects of different parameterized types
==> passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
  * n = 5, trials = 12000
  * n = 8, trials = 12000
  * n = 10, trials = 12000
==> passed

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: 1

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.checkRandomnessOfDequeue(TestRandomizedQueue.java:568)
    TestRandomizedQueue.test14(TestRandomizedQueue.java:992)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1206)

  * n = 3, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: 2

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.checkRandomnessOfDequeue(TestRandomizedQueue.java:568)
    TestRandomizedQueue.test14(TestRandomizedQueue.java:993)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1206)

  * n = 4, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: 2

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.checkRandomnessOfDequeue(TestRandomizedQueue.java:568)
    TestRandomizedQueue.test14(TestRandomizedQueue.java:994)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1206)

  * n = 5, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: 4

    RandomizedQueue.dequeue(RandomizedQueue.java:62)
    TestRandomizedQueue.checkRandomnessOfDequeue(TestRandomizedQueue.java:568)
    TestRandomizedQueue.test14(TestRandomizedQueue.java:995)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1206)

==> FAILED

Test 15: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
    - iterator() returns the same item more than once
    - but no duplicate items were added to randomized queue
    - failed on operation 1 of 12000

  * n = 3, trials = 12000
    - iterator() returns the same item more than once
    - but no duplicate items were added to randomized queue
    - failed on operation 1 of 12000

  * n = 4, trials = 12000
    - iterator() returns the same item more than once
    - but no duplicate items were added to randomized queue
    - failed on operation 1 of 12000

  * n = 5, trials = 12000
    - iterator() returns the same item more than once
    - but no duplicate items were added to randomized queue
    - failed on operation 1 of 12000

==> FAILED

Test 16: call enqueue() with a null argument
==> passed

Test 17: check that remove() and next() throw the specified exceptions in iterator()
    - fails to throw an exception when calling next() when iterator is exhausted

==> FAILED

Test 18: call iterator() when randomized queue is empty
==> passed


Total: 6/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 < distinct.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    TestPermutation.checkFormatting(TestPermutation.java:40)
    TestPermutation.test1a(TestPermutation.java:206)
    TestPermutation.main(TestPermutation.java:316)

    - student solution threw an exception
    - reference solution did not throw an exception

  % java Permutation 3 < distinct.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    TestPermutation.checkFormatting(TestPermutation.java:40)
    TestPermutation.test1a(TestPermutation.java:207)
    TestPermutation.main(TestPermutation.java:316)

    - student solution threw an exception
    - reference solution did not throw an exception

  % java Permutation 8 < duplicates.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    TestPermutation.checkFormatting(TestPermutation.java:40)
    TestPermutation.test1a(TestPermutation.java:208)
    TestPermutation.main(TestPermutation.java:316)

    - student solution threw an exception
    - reference solution did not throw an exception

==> FAILED

Test 1b: check formatting for other inputs
  % java Permutation 8 < mediumTale.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    TestPermutation.checkFormatting(TestPermutation.java:40)
    TestPermutation.test1b(TestPermutation.java:214)
    TestPermutation.main(TestPermutation.java:319)

    - student solution threw an exception
    - reference solution did not throw an exception

  % java Permutation 0 < distinct.txt
  [no output]

==> FAILED

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    UtilCOS.consumesStdIn(UtilCOS.java:178)
    TestPermutation.checkConsumesStdIn(TestPermutation.java:52)
    TestPermutation.test2(TestPermutation.java:221)
    TestPermutation.main(TestPermutation.java:322)

  * filename = distinct.txt, k = 3
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    UtilCOS.consumesStdIn(UtilCOS.java:178)
    TestPermutation.checkConsumesStdIn(TestPermutation.java:52)
    TestPermutation.test2(TestPermutation.java:222)
    TestPermutation.main(TestPermutation.java:322)

  * filename = duplicates.txt, k = 8
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    UtilCOS.consumesStdIn(UtilCOS.java:178)
    TestPermutation.checkConsumesStdIn(TestPermutation.java:52)
    TestPermutation.test2(TestPermutation.java:223)
    TestPermutation.main(TestPermutation.java:322)

  * filename = mediumTale.txt, k = 8
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    UtilCOS.consumesStdIn(UtilCOS.java:178)
    TestPermutation.checkConsumesStdIn(TestPermutation.java:52)
    TestPermutation.test2(TestPermutation.java:224)
    TestPermutation.main(TestPermutation.java:322)

==> FAILED

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3a(TestPermutation.java:232)
    TestPermutation.main(TestPermutation.java:325)

  * filename = distinct.txt, k = 1
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3a(TestPermutation.java:233)
    TestPermutation.main(TestPermutation.java:325)

  * filename = distinct.txt, k = 9
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3a(TestPermutation.java:234)
    TestPermutation.main(TestPermutation.java:325)

  * filename = permutation6.txt, k = 6
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3a(TestPermutation.java:235)
    TestPermutation.main(TestPermutation.java:325)

  * filename = permutation10.txt, k = 10
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3a(TestPermutation.java:236)
    TestPermutation.main(TestPermutation.java:325)

==> FAILED

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3b(TestPermutation.java:244)
    TestPermutation.main(TestPermutation.java:328)

  * filename = duplicates.txt, k = 3
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3b(TestPermutation.java:245)
    TestPermutation.main(TestPermutation.java:328)

  * filename = permutation8.txt, k = 6
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3b(TestPermutation.java:246)
    TestPermutation.main(TestPermutation.java:328)

  * filename = permutation8.txt, k = 2
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3b(TestPermutation.java:247)
    TestPermutation.main(TestPermutation.java:328)

  * filename = tinyTale.txt, k = 10
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3b(TestPermutation.java:248)
    TestPermutation.main(TestPermutation.java:328)

==> FAILED

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3c(TestPermutation.java:256)
    TestPermutation.main(TestPermutation.java:331)

  * filename = mediumTale.txt, k = 20
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3c(TestPermutation.java:257)
    TestPermutation.main(TestPermutation.java:331)

  * filename = tale.txt, k = 10
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3c(TestPermutation.java:259)
    TestPermutation.main(TestPermutation.java:331)

  * filename = tale.txt, k = 50
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3c(TestPermutation.java:260)
    TestPermutation.main(TestPermutation.java:331)

==> FAILED

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
  * filename = distinct.txt, k = 0
==> passed

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkRandomnessOfPermutation(TestPermutation.java:161)
    TestPermutation.test5a(TestPermutation.java:278)
    TestPermutation.main(TestPermutation.java:337)

  * filename = permutation4.txt, k = 2
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkRandomnessOfPermutation(TestPermutation.java:161)
    TestPermutation.test5a(TestPermutation.java:279)
    TestPermutation.main(TestPermutation.java:337)

  * filename = permutation4.txt, k = 3
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkRandomnessOfPermutation(TestPermutation.java:161)
    TestPermutation.test5a(TestPermutation.java:280)
    TestPermutation.main(TestPermutation.java:337)

  * filename = permutation4.txt, k = 4
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkRandomnessOfPermutation(TestPermutation.java:161)
    TestPermutation.test5a(TestPermutation.java:281)
    TestPermutation.main(TestPermutation.java:337)

  * filename = permutation6.txt, k = 2
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkRandomnessOfPermutation(TestPermutation.java:161)
    TestPermutation.test5a(TestPermutation.java:282)
    TestPermutation.main(TestPermutation.java:337)

==> FAILED

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkRandomnessOfPermutation(TestPermutation.java:161)
    TestPermutation.test5b(TestPermutation.java:290)
    TestPermutation.main(TestPermutation.java:340)

  * filename = permutation5.txt, k = 2
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkRandomnessOfPermutation(TestPermutation.java:161)
    TestPermutation.test5b(TestPermutation.java:291)
    TestPermutation.main(TestPermutation.java:340)

  * filename = permutation5.txt, k = 3
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkRandomnessOfPermutation(TestPermutation.java:161)
    TestPermutation.test5b(TestPermutation.java:292)
    TestPermutation.main(TestPermutation.java:340)

  * filename = duplicates.txt, k = 3
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkRandomnessOfPermutation(TestPermutation.java:161)
    TestPermutation.test5b(TestPermutation.java:293)
    TestPermutation.main(TestPermutation.java:340)

  * filename = permutation8.txt, k = 2
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TestPermutation.checkRandomnessOfPermutation(TestPermutation.java:161)
    TestPermutation.test5b(TestPermutation.java:294)
    TestPermutation.main(TestPermutation.java:340)

==> FAILED

Total: 1/9 tests passed!


================================================================
********************************************************************************
*  TIMING (substituting reference RandomizedQueue and Deque)
********************************************************************************

Timing Permutation
*-----------------------------------------------------------
Running 23 total tests.

Test 1: count calls to methods in StdIn
  * java Permutation 5 < distinct.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToStdIn(TimePermutation.java:61)
    TimePermutation.test1(TimePermutation.java:303)
    TimePermutation.main(TimePermutation.java:358)

  * java Permutation 10 < permutation10.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToStdIn(TimePermutation.java:61)
    TimePermutation.test1(TimePermutation.java:304)
    TimePermutation.main(TimePermutation.java:358)

  * java Permutation 1 < mediumTale.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToStdIn(TimePermutation.java:61)
    TimePermutation.test1(TimePermutation.java:305)
    TimePermutation.main(TimePermutation.java:358)

  * java Permutation 20 < tale.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToStdIn(TimePermutation.java:61)
    TimePermutation.test1(TimePermutation.java:306)
    TimePermutation.main(TimePermutation.java:358)

  * java Permutation 100 < tale.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToStdIn(TimePermutation.java:61)
    TimePermutation.test1(TimePermutation.java:307)
    TimePermutation.main(TimePermutation.java:358)

  * java Permutation 16412 < tale.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToStdIn(TimePermutation.java:61)
    TimePermutation.test1(TimePermutation.java:308)
    TimePermutation.main(TimePermutation.java:358)

==> FAILED

Test 2: count calls to methods in Deque and RandomizedQueue
  * java Permutation 5 < distinct.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToDequeAndRandomizedQueue(TimePermutation.java:140)
    TimePermutation.test2(TimePermutation.java:314)
    TimePermutation.main(TimePermutation.java:361)

  * java Permutation 10 < permutation10.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToDequeAndRandomizedQueue(TimePermutation.java:140)
    TimePermutation.test2(TimePermutation.java:315)
    TimePermutation.main(TimePermutation.java:361)

  * java Permutation 1 < mediumTale.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToDequeAndRandomizedQueue(TimePermutation.java:140)
    TimePermutation.test2(TimePermutation.java:316)
    TimePermutation.main(TimePermutation.java:361)

  * java Permutation 20 < tale.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToDequeAndRandomizedQueue(TimePermutation.java:140)
    TimePermutation.test2(TimePermutation.java:317)
    TimePermutation.main(TimePermutation.java:361)

  * java Permutation 100 < tale.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToDequeAndRandomizedQueue(TimePermutation.java:140)
    TimePermutation.test2(TimePermutation.java:318)
    TimePermutation.main(TimePermutation.java:361)

  * java Permutation 16412 < tale.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToDequeAndRandomizedQueue(TimePermutation.java:140)
    TimePermutation.test2(TimePermutation.java:319)
    TimePermutation.main(TimePermutation.java:361)

==> FAILED

Test 3: count calls to methods in StdRandom
  * java Permutation 5 < distinct.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToStdRandom(TimePermutation.java:225)
    TimePermutation.test3(TimePermutation.java:325)
    TimePermutation.main(TimePermutation.java:364)

  * java Permutation 10 < permutation10.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToStdRandom(TimePermutation.java:225)
    TimePermutation.test3(TimePermutation.java:326)
    TimePermutation.main(TimePermutation.java:364)

  * java Permutation 1 < mediumTale.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToStdRandom(TimePermutation.java:225)
    TimePermutation.test3(TimePermutation.java:327)
    TimePermutation.main(TimePermutation.java:364)

  * java Permutation 20 < tale.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToStdRandom(TimePermutation.java:225)
    TimePermutation.test3(TimePermutation.java:328)
    TimePermutation.main(TimePermutation.java:364)

  * java Permutation 100 < tale.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToStdRandom(TimePermutation.java:225)
    TimePermutation.test3(TimePermutation.java:329)
    TimePermutation.main(TimePermutation.java:364)

  * java Permutation 16412 < tale.txt
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.countCallsToStdRandom(TimePermutation.java:225)
    TimePermutation.test3(TimePermutation.java:330)
    TimePermutation.main(TimePermutation.java:364)

==> FAILED

Test 4: Time main() with k = 5, for inputs containing n random strings

                    n  seconds
------------------------------
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.timeMain(TimePermutation.java:265)
    TimePermutation.checkRunningTimeOfMain(TimePermutation.java:284)
    TimePermutation.test4(TimePermutation.java:336)
    TimePermutation.main(TimePermutation.java:367)

=> FAILED        1000 Infinity
   [ Most likely main() takes more than linear time. ]
==> 0/10 tests passed


Test 5: Time main() with k = 1000, for inputs containing n random strings

                    n  seconds
------------------------------
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    UtilCOS.execute(UtilCOS.java:153)
    UtilCOS.execute(UtilCOS.java:140)
    TimePermutation.timeMain(TimePermutation.java:265)
    TimePermutation.checkRunningTimeOfMain(TimePermutation.java:284)
    TimePermutation.test5(TimePermutation.java:341)
    TimePermutation.main(TimePermutation.java:370)

=> FAILED        1000 Infinity
   [ Most likely main() takes more than linear time. ]
==> 0/10 tests passed


Total: 0/23 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    MemoryOfPermutation.checkNumberOfObjects(MemoryOfPermutation.java:27)
    MemoryOfPermutation.test1(MemoryOfPermutation.java:157)
    MemoryOfPermutation.main(MemoryOfPermutation.java:198)

  * filename = distinct.txt, n = 9, k = 2
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    MemoryOfPermutation.checkNumberOfObjects(MemoryOfPermutation.java:27)
    MemoryOfPermutation.test1(MemoryOfPermutation.java:158)
    MemoryOfPermutation.main(MemoryOfPermutation.java:198)

  * filename = distinct.txt, n = 9, k = 4
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    MemoryOfPermutation.checkNumberOfObjects(MemoryOfPermutation.java:27)
    MemoryOfPermutation.test1(MemoryOfPermutation.java:159)
    MemoryOfPermutation.main(MemoryOfPermutation.java:198)

  * filename = tinyTale.txt, n = 12, k = 10
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    MemoryOfPermutation.checkNumberOfObjects(MemoryOfPermutation.java:27)
    MemoryOfPermutation.test1(MemoryOfPermutation.java:160)
    MemoryOfPermutation.main(MemoryOfPermutation.java:198)

  * filename = tale.txt, n = 138653, k = 50
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    MemoryOfPermutation.checkNumberOfObjects(MemoryOfPermutation.java:27)
    MemoryOfPermutation.test1(MemoryOfPermutation.java:161)
    MemoryOfPermutation.main(MemoryOfPermutation.java:198)

==> FAILED

Test 2: check that the maximum size of any Deque or RandomizedQueue object
        created is between k and n
  * filename = distinct.txt, n = 9, k = 1
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    MemoryOfPermutation.checkMaxSize(MemoryOfPermutation.java:63)
    MemoryOfPermutation.test2(MemoryOfPermutation.java:168)
    MemoryOfPermutation.main(MemoryOfPermutation.java:199)

  * filename = distinct.txt, n = 9, k = 2
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    MemoryOfPermutation.checkMaxSize(MemoryOfPermutation.java:63)
    MemoryOfPermutation.test2(MemoryOfPermutation.java:169)
    MemoryOfPermutation.main(MemoryOfPermutation.java:199)

  * filename = distinct.txt, n = 9, k = 4
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQueue.java:178)
    Permutation.main(Permutation.java:17)
    MemoryOfPermutation.checkMaxSize(MemoryOfPermutation.java:63)
    MemoryOfPermutation.test2(MemoryOfPermutation.java:170)
    MemoryOfPermutation.main(MemoryOfPermutation.java:199)

  * filename = tinyTale.txt, n = 12, k = 10
    java.util.ConcurrentModificationException: randomized queue was modified during iteration

    RandomizedQueue$RandomIterator.checkFailFast(RandomizedQueue.java:201)
    RandomizedQueue$RandomIterator.hasNext(RandomizedQu

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.